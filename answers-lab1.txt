Lab1 


#1. At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?

= At the line "lgdt gdtdesc" in boot.asm, it prepares the GDT first to enable 32-bit protected mode.
= At the line "ljmp $PROT_MODE_CSEG, $protcseg" in boot.asm, it jumps to next instruction in 32-bit code segment, swtiching processor into 32-bit mode. 


#2. What is the last instruction of the boot loader executed, and what is the first instruction of the kernel it just loaded?

= The last instruction of the boot loader executed in boot.asm is "((void (*)(void)) (ELFHDR->e_entry))();" (="7d61: ff 15 18 00 01 00	call   *0x10018")
= The first instruction of the kernel it just loaded in kernel.asm is "movw $0x1234,0x472" # warm boot (="f010000c: 66 c7 05 72 04 00 00 	movw   $0x1234,0x472") 


#3. Where is the first instruction of the kernel?

= The last instruction of the boot loader calls "*0x10018", and then when using gdb function such as "x/1x <address>", meaning that displays the memory content at a given address with hexadecimal values, we can get "0x10018: 0x0010000c" as the result. So, the first instruction of the kernel is on "0x0010000c".
Simply, we can use "si" after call *0x100018", and thus, in gdb, the next following instruction is 0x10000c 


#4. How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?

= In the bootmain function (boot/main.c), boot loader read the first page of disk, and then it reads the information of the segments in the disk, using program header (ph) during the for loop. After that, it loads each of the segment to its ph->ppa (might be physical address). Moreover, ph->ppa is the load address of this segment (as well as the physical address)


#5. From the output, explain how the address values of pointers a, b, and c in line 1 change to the values shown in line 6.

= The reason of why corrupted values are in pointer.c is below.
     
     c = a;					// 'c' is a pointer to 'a'  => c[4][4]: 4 empty space , 4 * 1 bytes
     c = c+1;				// Move the pointer to 4 bytes ( c[0] -> c[1] )  
     c = (int *)((char *) c+1);		// Move the pointer to 1 bytes ( c[1][0] -> c[1][1] ) 
     b = (int *) a+1; 			// 'b' is a pointer to 'a', and move the pointer to 4 bytes. ( b[0] = a[1] ) 
     c = (int *) ((char *) a + 1);	// Move current 'c' pointer to 1 bytes ( c[1][1] -> c[1][2] )
 
   The results of the code in pointer.c shows "a = 0x7fffffffda40, b = 0x7fffffffda44, c = 0x7fffffffda41". The address of the array "a" is  0x7fffffffda40, and then the code above changes the address of the array "b" into 0x7fffffffda44 because "b" is the pointer of "a" and is added by one, which means that the address of "b" is equal to being added 4 bytes to the address of "a". Then, the case of "c" is added by 1 byte by using type casting. However, when *c = 500, 'c' violates the address of c[2] (=a[2]), and thus there are some corrupted values because of it.


#6. How do we get all the values in lines 2 through 4?

 = At the first for loop, An array "a", which has the size 4, is filled with 100, 101, 102, 103 respectively, and an array "c" is a pointer of "a", which can affect the component of the array "a". When the array "c" is inserted by values 200, 300, 301, and 302 respectively, the elements of the array "a" are changed as same as the components of "c". Then, the base pointer of "c" is added by 1, and 400 is inserted into the new base pointer, so c[1] is equal to 400, which means a[1] has the value of 400. 


#7. Why are the values printed in line 5 seemingly corrupted?

= The reason why the values printed in line 5 seemingly corrupted is that type casting "c" can violate the value of the memory, causing the values to be corrupted. The code in the pointer.c is below.

     c = (int *) ((char *) c + 1);
    *c = 500;

   When "c" is used by type casting (int -> char -> int) and the value 500 is inserted, the value 500 is inserted into the area of three bytes in c[1] except first one byte and the first one byte in c[2], causing to occur corrupted value.  
   

#8. Why are they different?

= At the point the BIOS enters the boot loader, the memory at 0x00100000 is nothing because boot loader does not load the kernel into the memory yet, which means that there is no data or value when examining. After entering the kernel, however, boot loader loads the kernel into the memory. Thus, there is difference between two breakpoints because of whether boot loader loads the kernel data or not.


#9. What is there at the second breakpoint?

= The kernel (is loaded by boot loader into the physical address of the memory). So I got this from gdb.

 >>> x/8wx 0x00100000
0x100000:       0x1badb002      0x00000000      0xe4524ffe      0x7205c766
0x100010:       0x34000004      0x0000b812      0x220f0011      0xc0200fd8


#10. What is the first instruction after the new mapping is established that would fail to work properly if the mapping weren't in place? Comment out the movl %eax, %cr0 in kern/entry.S, trace into it, and see if you were right.

= When I commented out the movl %eax, %cr0 in kern/entry.S, the next instruction was "mov &relocated, %eax". The difference of commenting out the line is the address of the next instruction (0xf010002c and 0xf01002f respectively). In the case of the address at 0xf010002c, which is commented out, the program showed fatal errors about the memory address.


#11. Explain the interface between kern/printf.c and kern/console.c. Specifically, what function does kern/console.c export? How is this function used by kern/printf.c?

= kern/console.c exports cputchar(int c), getchar(void), iscons(int fdnum). However, cputchar is used as a parameter when vprintfmt is called, which is in printfmt.c.


#12. Explain the following from kern/console.c:

	if (crt_pos >= CRT_SIZE) {
 		int i;
 		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
 		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
 			crt_buf[i] = 0x0700 | ' ';
 		crt_pos -= CRT_COLS;
	}

= The code above implements scrolling down one row to show newer information. We can guess the condition "crt_pos >= CRT_SIZE", meaning that the current position in CRT is out of CRT_SIZE. Then, crt_buf is used for moving data, and finally the current crt_pos is subtracted by CRT_COLS, which is a space for newer information.


#13. In the call to cprintf(), to what does fmt point? To what does ap point?

= In the call to cprintf(), fmt points to string of its argument, and ap points to variable argument after fmt.


#14. List (in order of execution) each call to cons_putc, va_arg, and vcprintf. For cons_putc, list its argument as well. For va_arg, list what ap points to before and after the call. For vcprintf list the values of its two arguments.

	int x = 1, y = 3, z = 4;
	cprintf("x %d, y %x, z %d\n", x, y, z);

= cprintf, fmt = 0xf0101954
   vcprintf, fmt = [d % _ x / _ y _ , / _ , x % / d % _ z / e k NULL LF] (0xf0101954), ap = 0x00000001 (0xf010ffe4)
   cons_putc, c = 120 (decimal value) = "x" (ASCII)
   cons_putc, c = 32 = ' ' (space)
   va_arg(*ap, int), ap: [before: 0x00000001 (0xf010ffe4), after: 0x00000003 (0xf010ffe8)]
   cons_putc, c = 49 = '1'
   cons_putc, c = 44 = ','
   cons_putc, c = 32 = ' ' (space)
   cons_putc, c = 121 = 'y' 
   cons_putc, c = 32 = ' ' (space)
   va_arg(*ap, int), ap: [before: 0x00000003 (0xf010ffe8), after: 0x00000004 (0xf010ff9c)]
   cons_putc, c = 51 = '3'
   cons_putc, c = 44 = ','
   cons_putc, c = 32 = ' ' (space)
   cons_putc, c = 122 = 'z' 
   cons_putc, c = 32 = ' ' (space)
   va_arg(*ap, int), ap: [before: 0x00000004 (0xf010ff9c), after: 0xf010ffac, 0xf010ffec, 0xf010fff0 ...]
   cons_putc, c = 52 = '4' 
   cons_putc, c = 10 = '\n' (LF) 



#15. What is the output? Explain how this output is arrived at in the step-by-step manner of the previous exercise. Here's an ASCII table (or type man ascii) that maps bytes to characters.

	unsigned int i = 0x00646c72;
	cprintf("H%x Wo%s", 57616, &i);

= The output is "He110 World". In the string argument "H%x Wo%s", which is pointed by fmt, %x and %s means hexadecimal value and string respectively, so the results of them are 0xe110 and rld (because of little endian, d=64, l=6c, r=72, and NULL=00). 

#16. The output depends on the fact that the x86 is little-endian. If the x86 were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?

= In order to yield the same output by using big-endian, we need to change the order of i like 0x726c6400. However, the value 57616 does not need to be changed because it is single integer value, not the sequence of hexadecimal values.


#17. In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value) Why does this happen?

	cprintf("x=%d y=%d", 3);

= the value of 'y' would be 4 bytes on top of the '3', which is the value of 'x', in the stack. However, the system keep looking for the unknown 4 bytes right above 3. I got the result of y=1600 (qemu screen), but during the kernel processing, I got the values like t(116), e(101), t(116), r(114), a(97), ... 


#18. How would you have to change cprintf or its interface so that it would still be possible to pass it a variable number of arguments?

= We can push an integer after last argument, which indicate the number of arguments. By doing so, it would be possible to pass.


#19. How many 32-bit words does each recursive nesting level of test_backtrace push on the stack, and what are those words?

= Each recursive nesting level of test_backtrace push 8 words, which are the return address, ebp, ebx, the variable value of 'x', and the 4 calls inside cprintf() (this is my guess) on the stack. 
