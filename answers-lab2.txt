# lab2 Questions & Answers

# Q1: Assuming that the following JOS kernel code is correct, 
        what type should variable x have, uintptr_t or physaddr_t, and why?

        mystery_t x;
        char* value = return_a_pointer();
        *value = 10;
        x = (mystery_t) value;

= variable x should has uintptr_t type. 
   In the Exercise 3, All memory references are interpreted as virtual addresses and
   translated by the MMU, which means all pointers in C are virtual addressess.
   We can guess that the "value" above is a returned pointer(memory reference), 
   meaning that the "value" has a virtual address. In the protected mode, all 
   C programming deal with virtual addresses, not physical adressess.


# Q2: What entries (rows) in the page directory have been filled in at this point?
        What addresses do they map and where do they point? In other words, 
        fill out this table as much as possible:
         
    ------------------------------------------------------------------------------
    | Entry | Base Virtual Address |            Points to (logically)            |
    ------------------------------------------------------------------------------
    | 1023  | 0xffc00000           | Page table for top 4MB of phys memory       |
    ------------------------------------------------------------------------------
    | ..... |   ......             |                    .....                    |
    ------------------------------------------------------------------------------
    | 992   | 0xf8000000           | Page table for second top 4MB of phys memory|
    ------------------------------------------------------------------------------
    | ..... |   ......             |                    .....                    |
    ------------------------------------------------------------------------------
    | 961   | 0xf0400000           | Page table for third top 4MB of phys memory |
    ------------------------------------------------------------------------------
    | 960   | 0xf0000000           | Page table for first 4MB of phys memory     |
    ------------------------------------------------------------------------------
    | 959   | 0xefc00000           | Kernal stack                                |
    ------------------------------------------------------------------------------
    | 957   | 0xef400000           | Page Directory itself                       |
    ------------------------------------------------------------------------------
    | 956   | 0xef000000           | Page Info Structure                         |
    ------------------------------------------------------------------------------
    | 955   | 0xeec00000           | RO ENVS                                     |
    ------------------------------------------------------------------------------
    | ..... |   ......             |                    .....                    |
    ------------------------------------------------------------------------------
    | 2     | 0x00800000           |                    Empty                    |
    ------------------------------------------------------------------------------
    | 1     | 0x00400000           |                    Empty                    |
    ------------------------------------------------------------------------------
    | 0     | 0x00000000           |          Empty  [see next question]         |
    ------------------------------------------------------------------------------


# Q3: We have placed the kernel and user environment in the same address space. 
        Why will user programs not be able to read or write the kernel's memory?
        What specific mechanisms protect the kernel memory?

=     In the INTEL 80386 PROGRAMMER'S REFERENCE MANUAL 1986, "the purpose of the 
  protection features of the 80386 is to help detect and identify bugs. The 80386 
  contains mechanisms to verify memory accesses and instruction execution for 
  conformance to protection criteria."  
      The Protection mechanisms in the 80386 have five aspects:
        1. Type checking
        2. Limit checking
        3. Restriction of addressable domain
        4. Restriction of procedure entry Points
        5. Restriction of instruction setup
   Moreover, kernel and user programs are running in different modes (protection ring),
   which are ring 0: kernel and ring 3: user respectively. When referencing a specific
   memory address, MMU will check the permission bits to identify the current procedure
   has proper privilege to access.


# Q4: What is the maximum amount of physical memory that this operating system
        can support? Why?

= 131MB (131072KB) in my operating system. I can find this information in 
  kern/pmap.c, which calculates total amount of the memory. When operating QEMU, 
  a sentence shows the physical memory can be available 131072KB. 
  In the kern/pmap.h, the machine's maximum 256MB of physical memory is mapped.


# Q5: How much space overhead is there for managing memory, if we actually had 
        maximum amount of physical memory? How is this overhead broken down?

= Overhead is what is required from the OS to make my program work, meaning that 
  it is mostly noticeable when memory resources are scarce. In this regard, we can guess 
  if there are no memory spaces available for paging, overhead will occur. 
  Therefore, over 4MB + 2MB + 4KB.
  4MB for Paging Structure
  2MB for PT
  4KB for PD 


# Q6: Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. 
        Immediately after we turn on paging, EIP is still a low number (a little over 1MB).
        At what point do we transition to running at an EIP above KERNBASE? 
        What makes it possible for us to continue executing at a low EIP between 
        when we enable paging and when we begin running at an EIP above KERNBASE?
        Why is this transition necessary?

= In the entry.S, <mov $relocated, %eax> is the point that transit to running at an EIP 
  above KERNBASE. In the kern/entrypgdir.c, both virtual addresses [KERNBASE, KERNBASE+4MB) 
  and [0, 4MB) to physical addresses [0, 4MB), which can map with one page table.  
  The reason why transition is necessary is that before KERNBASE setting, we cannot use 
  memory space for Kernel part, so after enabling paging, we can jump to a point above KERNBASE. 

        