Lab3 Write-up 


#1. What is the purpose of having an individual handler function for each exception/interrupt?
    (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that 
    exists in the current implementation could not be provided?)

    = If all exceptions/interrupts were delivered to the same handler, it is hard to recognize
      what the problems are when pushing the corresponding error code on the stack. Moreover,
      as can be seen in trap.c, it is to grant permission. If an exception/interrupt is 
      triggered, we cannot sure that it derives from user program or kernel system. After 
      granting permission level (ring 0 or 3), however, the program prevents itself from 
      invalid access.
      

#2. Did you have to do anything to make the user/softint program behave correctly? The grade
    script expects it to produce a general protection fault (trap 13), but softint's code says
    int $14. Why should this produce interrupt vector 13? What happens if the kernel actually
    allows softint's int $14 instruction to invoke the kernel's page fault handler (which is 
    interrupt vector 14)?

    = I did not do anything to make the program behave correctly. When I execute the program, 
      TRAP Frame shows Page Fault and the error code [kernel, read, not-present], then panic.
      In the intel 64 and IA-32 Architectures Developer's Manual, "Executing the INT n
      instruction when the CPL is greater than the DPL of the referenced interrupt, trap, or
      task gate (General Protection Exception). If we allow this in user level, the system 
      security issues may occur.
    

#3. The break point test case will either generate a break point exception or a general 
    protection fault depending on how you initialized the break point entry in the IDT (i.e., 
    your call to SETGATE from trap_init). Why? How do you need to set it up in order to get 
    the breakpoint exception to work as specified above and what incorrect setup would cause
    it to trigger a general protection fault?

    = Setting up the gates in the IDT can trigger the interrupts, which is associated with 
      privilege level, meaning that it is used to check valid permission. We can check the
      information about general protection as I mentioned above. Executing the INT n instruction
      when the CPL is greater than the DPL of the referenced interrupt, trap, or task gate.
       

#4. What do you think is the point of these mechanisms, particularly in light of what the
    user/softint test program does?
    
    = These mechanisms is used to protect the kernel from what user programs can do, which 
      can be valid/invalid. 
    
    


